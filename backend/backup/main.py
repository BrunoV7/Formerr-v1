"""
Formerr API - Sistema de Cria√ß√£o e Gerenciamento de Formul√°rios
=============================================================

Este √© o arquivo principal da aplica√ß√£o FastAPI do Formerr.
Desenvolvido por: Equipe de Desenvolvimento

Funcionalidades principais:
- Cria√ß√£o e gerenciamento de formul√°rios
- Sistema de autentica√ß√£o OAuth (GitHub)
- Submiss√µes de formul√°rios
- Webhooks para integra√ß√£o
- Sistema de email
- Analytics e m√©tricas

Estrutura da aplica√ß√£o:
- /auth - Rotas de autentica√ß√£o
- /api/forms - Gerenciamento de formul√°rios
- /api/submissions - Submiss√µes dos formul√°rios
- /api/webhooks - Integra√ß√£o com webhooks
- /api/email - Sistema de email
- /api/analytics - Analytics e m√©tricas
- /api/public - APIs p√∫blicas
"""

from fastapi import FastAPI
from datetime import datetime
import os
import psutil

# Importa√ß√£o das configura√ß√µes da aplica√ß√£o
from app.config import settings

# Importa√ß√£o dos middlewares para CORS e sess√µes
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware

# Importa√ß√£o de todos os roteadores da aplica√ß√£o
from app.public.routes import router as public_router
from app.auth.routes import router as auth_router
from app.forms.enhanced_routes import router as forms_router
from app.submissions.routes import router as submissions_router
from app.webhooks.routes import router as webhooks_router
from app.email.routes import router as email_router
from app.analytics.routes import router as analytics_router

# Cria√ß√£o da inst√¢ncia principal do FastAPI
app = FastAPI(
    title="Formerr API",
    description="Sistema profissional de cria√ß√£o e gerenciamento de formul√°rios",
    version="1.0.0",
    docs_url="/docs",  # Documenta√ß√£o Swagger UI
    redoc_url="/redoc"  # Documenta√ß√£o ReDoc alternativa
)

# Configura√ß√£o do middleware CORS (Cross-Origin Resource Sharing)
# Permite que o frontend acesse a API de diferentes dom√≠nios
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # TODO: Em produ√ß√£o, especificar dom√≠nios permitidos
    allow_credentials=True,  # Permite envio de cookies e headers de autentica√ß√£o
    allow_methods=["*"],  # Permite todos os m√©todos HTTP (GET, POST, PUT, DELETE, etc.)
    allow_headers=["*"],  # Permite todos os headers
)

# Configura√ß√£o do middleware de sess√£o para OAuth
# Necess√°rio para manter estado durante o fluxo de autentica√ß√£o
app.add_middleware(
    SessionMiddleware,
    secret_key=settings.SESSION_SECRET  # Chave secreta para criptografar sess√µes
)

# Registro de todos os roteadores da aplica√ß√£o
# Cada roteador gerencia um conjunto espec√≠fico de funcionalidades

# APIs p√∫blicas - acess√≠veis sem autentica√ß√£o
app.include_router(public_router, prefix="/api/public", tags=["üåê APIs P√∫blicas"])

# Sistema de autentica√ß√£o - GitHub OAuth
app.include_router(auth_router, prefix="/auth", tags=["üîê Autentica√ß√£o"])

# Gerenciamento de formul√°rios - CRUD completo
app.include_router(forms_router, prefix="/api/forms", tags=["üìù Formul√°rios"])

# Submiss√µes de formul√°rios - dados enviados pelos usu√°rios
app.include_router(submissions_router, prefix="/api/submissions", tags=["üìä Submiss√µes"])

# Webhooks - integra√ß√£o com sistemas externos
app.include_router(webhooks_router, prefix="/api/webhooks", tags=["üîó Webhooks"])

# Sistema de email - envio de notifica√ß√µes
app.include_router(email_router, prefix="/api/email", tags=["üìß Email"])

# Analytics - m√©tricas e relat√≥rios
app.include_router(analytics_router, prefix="/api/analytics", tags=["üìä Analytics"])

# Dashboard routes are included in forms_router
app.include_router(forms_router, prefix="/api/dashboard", tags=["üìä Dashboard"])

@app.get("/")
async def root():
    """
    Endpoint raiz da API - Informa√ß√µes b√°sicas do sistema
    
    Returns:
        dict: Informa√ß√µes sobre o status e vers√£o da API
    """
    return {
        "message": "Formerr API funcionando corretamente",
        "status": "online",
        "version": "1.0.0",
        "desenvolvedor": "Formerr Team",
        "timestamp": datetime.utcnow().isoformat(),
        "documentacao": "/docs"
    }


@app.get("/health")
async def health_check():
    """
    Endpoint de health check - Verifica o status da aplica√ß√£o e recursos do sistema
    
    Este endpoint √© usado para:
    - Monitoramento da aplica√ß√£o
    - Load balancers verificarem se o servi√ßo est√° saud√°vel
    - M√©tricas de performance do sistema
    
    Returns:
        dict: Informa√ß√µes detalhadas sobre o status do sistema
    """
    # Coleta informa√ß√µes de mem√≥ria do sistema
    memory = psutil.virtual_memory()
    
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "sistema": {
            "memoria_uso_percentual": memory.percent,
            "memoria_disponivel_gb": round(memory.available / (1024 ** 3), 2),
            "cpu_uso_percentual": psutil.cpu_percent(interval=1),
            "disco_uso_percentual": psutil.disk_usage('/').percent
        },
        "servicos": {
            "api": "funcionando",
            "autenticacao": "ativo",
            "email": "configurado"
        }
    }

if __name__ == "__main__":
    """
    Ponto de entrada da aplica√ß√£o quando executada diretamente
    
    Configura√ß√µes de desenvolvimento:
    - host="0.0.0.0": Permite acesso de qualquer IP (√∫til para desenvolvimento)
    - port=8000: Porta padr√£o da aplica√ß√£o
    - reload=True: Reinicia automaticamente quando arquivos s√£o modificados
    """
    import uvicorn
    
    print("ÔøΩ Iniciando Formerr API...")
    print("ÔøΩ Documenta√ß√£o dispon√≠vel em: http://localhost:8000/docs")
    
    uvicorn.run(
        "main:app", 
        host="0.0.0.0", 
        port=8000, 
        reload=True,
        log_level="info"
    )
