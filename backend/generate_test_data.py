#!/usr/bin/env python3
"""
Script para gerar dados de teste completos para a API Formerr
- Cria um formul√°rio
- Adiciona 3 se√ß√µes com 10 perguntas cada
- Publica o formul√°rio
- Gera 18 respostas com dados aleat√≥rios
"""

import requests
import json
import random
import time
from faker import Faker

# Configura√ß√µes
API_BASE_URL = "http://localhost:8000"
JWT_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJnaXRodWJfaWQiOjEwNDk0NTg3NywidXNlcm5hbWUiOiJCcnVub1Y3IiwibmFtZSI6IkJydW5vIFZpZWlyYSBOb2JyZSIsImVtYWlsIjoiYmFja3Vwbm9icmU2MkBnbWFpbC5jb20iLCJhdmF0YXJfdXJsIjoiaHR0cHM6Ly9hdmF0YXJzLmdpdGh1YnVzZXJjb250ZW50LmNvbS91LzEwNDk0NTg3Nz92PTQiLCJnaXRodWJfdXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL0JydW5vVjciLCJyb2xlIjoiZnJlZSIsInBlcm1pc3Npb25zIjpbImNyZWF0ZV9mb3JtIl0sImxpbWl0cyI6eyJtYXhfZm9ybXMiOjMsIm1heF9zdWJtaXNzaW9uc19wZXJfbW9udGgiOjEwMCwibWF4X3F1ZXN0aW9uc19wZXJfZm9ybSI6MTAsIm1heF9maWxlX3NpemVfbWIiOjV9LCJjcmVhdGVkX2F0IjoiMjAyNS0wNi0yMFQyMTo0NjoxNS41ODQ0NDciLCJ1c2VyX3R5cGUiOiJnaXRodWJfdXNlciIsInNwcmludF92ZXJzaW9uIjoiZm9ybWVycl9wbGF0Zm9ybV8yMDI1IiwiaXNfYWRtaW4iOmZhbHNlLCJleHAiOjE3NTMwNDc5NzUsImlhdCI6MTc1MDQ1NTk3NSwiaXNzIjoiRm9ybWVyciBBUEktRm9ybWVyciBUZWFtIn0.dmieI7kyTJOHa7xk-ggqytjJIJ9etCWzuWaXf64Ocfc"

# Inicializar Faker para dados aleat√≥rios
fake = Faker('pt_BR')

# Headers para requisi√ß√µes autenticadas
auth_headers = {
    "Authorization": f"Bearer {JWT_TOKEN}",
    "Content-Type": "application/json"
}

# Headers para requisi√ß√µes p√∫blicas
public_headers = {
    "Content-Type": "application/json"
}

def create_form():
    """Cria um novo formul√°rio"""
    print("üî® Criando novo formul√°rio...")
    
    form_data = {
        "title": "Pesquisa de Satisfa√ß√£o do Cliente",
        "description": "Uma pesquisa completa para avaliar a experi√™ncia do cliente com nossos produtos e servi√ßos",
        "icon": "üìä",
        "folder_color": "#10B981"
    }
    
    response = requests.post(
        f"{API_BASE_URL}/forms",
        headers=auth_headers,
        json=form_data
    )
    
    if response.status_code == 200:
        form_id = response.json()["formId"]
        print(f"‚úÖ Formul√°rio criado com ID: {form_id}")
        return form_id
    else:
        print(f"‚ùå Erro ao criar formul√°rio: {response.text}")
        return None

def create_sections(form_id):
    """Cria 3 se√ß√µes com 10 perguntas cada"""
    print("üìù Criando se√ß√µes e perguntas...")
    
    sections_data = [
        {
            "title": "Informa√ß√µes Pessoais",
            "description": "Dados b√°sicos sobre o respondente",
            "questions": [
                {"title": "Qual √© o seu nome completo?", "type": "text", "required": True, "placeholder": "Digite seu nome completo"},
                {"title": "Qual √© o seu email?", "type": "email", "required": True, "placeholder": "seuemail@exemplo.com"},
                {"title": "Qual √© a sua idade?", "type": "number", "required": True, "placeholder": "Ex: 25"},
                {"title": "Qual √© o seu telefone?", "type": "text", "required": False, "placeholder": "(11) 99999-9999"},
                {"title": "Em qual cidade voc√™ mora?", "type": "text", "required": True, "placeholder": "Digite sua cidade"},
                {"title": "Qual √© o seu estado civil?", "type": "select", "required": False, "options": {"choices": ["Solteiro(a)", "Casado(a)", "Divorciado(a)", "Vi√∫vo(a)"]}},
                {"title": "Qual √© o seu n√≠vel de escolaridade?", "type": "select", "required": False, "options": {"choices": ["Ensino Fundamental", "Ensino M√©dio", "Ensino Superior", "P√≥s-gradua√ß√£o"]}},
                {"title": "Qual √© a sua profiss√£o?", "type": "text", "required": False, "placeholder": "Digite sua profiss√£o"},
                {"title": "Qual √© a sua renda mensal?", "type": "select", "required": False, "options": {"choices": ["At√© R$ 2.000", "R$ 2.001 - R$ 5.000", "R$ 5.001 - R$ 10.000", "Acima de R$ 10.000"]}},
                {"title": "Como voc√™ nos conheceu?", "type": "select", "required": True, "options": {"choices": ["Redes sociais", "Indica√ß√£o de amigos", "Pesquisa no Google", "Publicidade", "Outros"]}}
            ]
        },
        {
            "title": "Avalia√ß√£o do Produto/Servi√ßo",
            "description": "Sua experi√™ncia com nossos produtos e servi√ßos",
            "questions": [
                {"title": "Como voc√™ avalia nosso produto/servi√ßo em geral?", "type": "select", "required": True, "options": {"choices": ["Excelente", "Muito bom", "Bom", "Regular", "Ruim"]}},
                {"title": "O produto/servi√ßo atendeu suas expectativas?", "type": "select", "required": True, "options": {"choices": ["Superou", "Atendeu", "N√£o atendeu"]}},
                {"title": "Qual nota voc√™ daria para a qualidade? (1-10)", "type": "number", "required": True, "placeholder": "1 a 10"},
                {"title": "Qual nota voc√™ daria para o atendimento? (1-10)", "type": "number", "required": True, "placeholder": "1 a 10"},
                {"title": "Voc√™ recomendaria nosso produto/servi√ßo?", "type": "select", "required": True, "options": {"choices": ["Certamente sim", "Provavelmente sim", "Talvez", "Provavelmente n√£o", "Certamente n√£o"]}},
                {"title": "O que mais gostou no produto/servi√ßo?", "type": "textarea", "required": False, "placeholder": "Descreva os pontos positivos"},
                {"title": "O que poderia ser melhorado?", "type": "textarea", "required": False, "placeholder": "Sugest√µes de melhoria"},
                {"title": "Teve algum problema com o produto/servi√ßo?", "type": "select", "required": False, "options": {"choices": ["Sim", "N√£o"]}},
                {"title": "Se sim, como foi resolvido?", "type": "textarea", "required": False, "placeholder": "Descreva como foi a resolu√ß√£o"},
                {"title": "Usaria nosso produto/servi√ßo novamente?", "type": "select", "required": True, "options": {"choices": ["Certamente sim", "Provavelmente sim", "Talvez", "Provavelmente n√£o", "Certamente n√£o"]}}
            ]
        },
        {
            "title": "Feedback e Sugest√µes",
            "description": "Suas opini√µes e sugest√µes para melhorarmos",
            "questions": [
                {"title": "Como voc√™ avalia nosso site/aplicativo?", "type": "select", "required": False, "options": {"choices": ["Excelente", "Muito bom", "Bom", "Regular", "Ruim"]}},
                {"title": "A navega√ß√£o √© intuitiva?", "type": "select", "required": False, "options": {"choices": ["Muito f√°cil", "F√°cil", "M√©dio", "Dif√≠cil", "Muito dif√≠cil"]}},
                {"title": "O processo de compra foi f√°cil?", "type": "select", "required": False, "options": {"choices": ["Muito f√°cil", "F√°cil", "M√©dio", "Dif√≠cil", "Muito dif√≠cil"]}},
                {"title": "Que funcionalidades gostaria de ver?", "type": "textarea", "required": False, "placeholder": "Sugest√µes de novas funcionalidades"},
                {"title": "Como avalia nosso suporte ao cliente?", "type": "select", "required": False, "options": {"choices": ["Excelente", "Muito bom", "Bom", "Regular", "Ruim", "N√£o utilizei"]}},
                {"title": "Nossos pre√ßos s√£o justos?", "type": "select", "required": False, "options": {"choices": ["Muito baratos", "Baratos", "Justos", "Caros", "Muito caros"]}},
                {"title": "Que canais de comunica√ß√£o prefere?", "type": "select", "required": False, "options": {"choices": ["WhatsApp", "Email", "Telefone", "Chat online", "Redes sociais"]}},
                {"title": "Gostaria de receber novidades por email?", "type": "select", "required": False, "options": {"choices": ["Sim", "N√£o"]}},
                {"title": "Coment√°rios adicionais", "type": "textarea", "required": False, "placeholder": "Deixe seus coment√°rios, cr√≠ticas ou sugest√µes"},
                {"title": "Nota geral para nossa empresa (1-10)", "type": "number", "required": True, "placeholder": "1 a 10"}
            ]
        }
    ]
    
    section_ids = []
    question_ids = []
    
    for i, section_data in enumerate(sections_data, 1):
        print(f"üìã Criando se√ß√£o {i}: {section_data['title']}")
        
        response = requests.post(
            f"{API_BASE_URL}/forms/{form_id}/sections",
            headers=auth_headers,
            json=section_data
        )
        
        if response.status_code == 200:
            section_id = response.json()["sectionId"]
            section_ids.append(section_id)
            print(f"‚úÖ Se√ß√£o criada com ID: {section_id}")
            
            # Simular um pequeno delay
            time.sleep(0.5)
        else:
            print(f"‚ùå Erro ao criar se√ß√£o {i}: {response.text}")
    
    # Buscar IDs das perguntas do formul√°rio p√∫blico
    print("üîç Buscando IDs das perguntas...")
    
    # Primeiro publicar o formul√°rio
    publish_data = {"status": "public"}
    pub_response = requests.put(
        f"{API_BASE_URL}/forms/{form_id}/publish",
        headers=auth_headers,
        json=publish_data
    )
    
    if pub_response.status_code != 200:
        print(f"‚ùå Erro ao publicar formul√°rio temporariamente: {pub_response.text}")
        return section_ids, question_ids
    
    # Agora buscar as perguntas
    response = requests.get(f"{API_BASE_URL}/forms/{form_id}/public", headers=public_headers)
    
    if response.status_code == 200:
        form_data = response.json()
        for section in form_data["sections"]:
            for question in section["questions"]:
                question_ids.append({
                    "id": question["id"],
                    "title": question["title"],
                    "type": question["type"],
                    "options": question.get("options")
                })
        print(f"‚úÖ Encontradas {len(question_ids)} perguntas")
    
    return section_ids, question_ids

def publish_form(form_id):
    """Publica o formul√°rio"""
    print("üöÄ Publicando formul√°rio...")
    
    publish_data = {
        "status": "public"
    }
    
    response = requests.put(
        f"{API_BASE_URL}/forms/{form_id}/publish",
        headers=auth_headers,
        json=publish_data
    )
    
    if response.status_code == 200:
        print("‚úÖ Formul√°rio publicado com sucesso")
        return True
    else:
        print(f"‚ùå Erro ao publicar formul√°rio: {response.text}")
        return False

def generate_random_answer(question):
    """Gera uma resposta aleat√≥ria baseada no tipo da pergunta"""
    question_type = question["type"]
    question_title = question["title"].lower()
    
    if question_type == "text":
        if "nome" in question_title:
            return [fake.name()]
        elif "telefone" in question_title:
            return [fake.phone_number()]
        elif "cidade" in question_title:
            return [fake.city()]
        elif "profiss√£o" in question_title:
            profissoes = ["Desenvolvedor", "Designer", "Gerente", "Analista", "Consultor", "Professor", "M√©dico", "Advogado", "Engenheiro", "Vendedor"]
            return [random.choice(profissoes)]
        else:
            return [fake.sentence()]
    
    elif question_type == "email":
        return [fake.email()]
    
    elif question_type == "number":
        if "idade" in question_title:
            return [str(random.randint(18, 65))]
        elif "nota" in question_title:
            return [str(random.randint(1, 10))]
        else:
            return [str(random.randint(1, 100))]
    
    elif question_type == "select":
        # Para perguntas de m√∫ltipla escolha, escolher uma op√ß√£o aleat√≥ria
        if question.get("options") and question["options"].get("choices"):
            return [random.choice(question["options"]["choices"])]
        else:
            return ["Sim"]
    
    elif question_type == "textarea":
        return [fake.paragraph()]
    
    else:
        return [fake.word()]

def generate_responses(form_id, question_ids, num_responses=18):
    """Gera respostas aleat√≥rias para o formul√°rio"""
    print(f"üé≤ Gerando {num_responses} respostas aleat√≥rias...")
    
    for i in range(num_responses):
        print(f"üìù Gerando resposta {i+1}/{num_responses}")
        
        # Gerar dados do respondente
        respondent_email = fake.email()
        
        # Gerar respostas para todas as perguntas
        answers = []
        for question in question_ids:
            # Algumas perguntas podem n√£o ser respondidas (simulando comportamento real)
            if random.random() > 0.1:  # 90% de chance de responder cada pergunta
                answer = generate_random_answer(question)
                answers.append({
                    "question_id": question["id"],
                    "value": answer
                })
        
        # Submeter resposta
        submission_data = {
            "answers": answers,
            "respondent_email": respondent_email
        }
        
        response = requests.post(
            f"{API_BASE_URL}/forms/{form_id}/submit",
            headers=public_headers,
            json=submission_data
        )
        
        if response.status_code == 200:
            session_id = response.json()["session_id"]
            print(f"‚úÖ Resposta {i+1} enviada - Session ID: {session_id}")
        else:
            print(f"‚ùå Erro ao enviar resposta {i+1}: {response.text}")
        
        # Pequeno delay entre submiss√µes
        time.sleep(0.2)

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando gera√ß√£o de dados de teste completos...")
    print("=" * 60)
    
    # 1. Criar formul√°rio
    form_id = create_form()
    if not form_id:
        return
    
    # 2. Criar se√ß√µes e perguntas
    section_ids, question_ids = create_sections(form_id)
    if not question_ids:
        print("‚ùå N√£o foi poss√≠vel obter as perguntas")
        return
    
    # 3. Publicar formul√°rio
    if not publish_form(form_id):
        return
    
    # 4. Gerar respostas
    generate_responses(form_id, question_ids, 18)
    
    print("=" * 60)
    print("üéâ Gera√ß√£o de dados de teste conclu√≠da!")
    print(f"üìä Formul√°rio ID: {form_id}")
    print(f"üìã {len(section_ids)} se√ß√µes criadas")
    print(f"‚ùì {len(question_ids)} perguntas criadas")
    print(f"üìù 18 respostas geradas")
    print(f"üåê Acesse: {API_BASE_URL}/forms/{form_id}/public")

if __name__ == "__main__":
    main()
