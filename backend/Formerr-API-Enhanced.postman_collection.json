{
  "info": {
    "_postman_id": "formerr-api-enhanced-v2",
    "name": "Formerr API - Enhanced Collection",
    "description": "Cole√ß√£o completa e otimizada para a API Formerr com:\n- ‚úÖ Vari√°veis de ambiente\n- üîê Sistema completo de autentica√ß√£o\n- üìä Dashboard e Analytics\n- üìù CRUD completo de formul√°rios\n- üß™ Testes automatizados\n- üìã Scripts de pre/post-request\n\n**Como usar:**\n1. Configure as vari√°veis de ambiente\n2. Execute os endpoints de autentica√ß√£o para obter token\n3. Use os demais endpoints (token ser√° inserido automaticamente)\n\n**Autor:** Equipe de Desenvolvimento\n**Vers√£o:** 2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{base_url}}",
      "type": "string"
    },
    {
      "key": "token",
      "value": "{{auth_token}}",
      "type": "string"
    },
    {
      "key": "formId",
      "value": "{{form_id}}",
      "type": "string"
    },
    {
      "key": "sectionId",
      "value": "{{section_id}}",
      "type": "string"
    },
    {
      "key": "questionId",
      "value": "{{question_id}}",
      "type": "string"
    },
    {
      "key": "responseSessionId",
      "value": "{{response_session_id}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• Health & Status",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Verifica se a aplica√ß√£o est√° funcionando corretamente"
          }
        },
        {
          "name": "Status Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/status_check",
              "host": ["{{baseUrl}}"],
              "path": ["status_check"]
            },
            "description": "Verifica o status detalhado da aplica√ß√£o"
          }
        }
      ],
      "description": "Endpoints para verificar o status e sa√∫de da aplica√ß√£o"
    },
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "GitHub OAuth - Initiate",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/github",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "github"]
            },
            "description": "Inicia o fluxo de autentica√ß√£o OAuth com GitHub\n\n‚ö†Ô∏è **Nota:** Este endpoint redirecionar√° para o GitHub. Use em um navegador para completar o fluxo."
          }
        },
        {
          "name": "GitHub OAuth - Callback",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/github/callback?code={{oauth_code}}&state={{oauth_state}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "github", "callback"],
              "query": [
                {
                  "key": "code",
                  "value": "{{oauth_code}}",
                  "description": "C√≥digo de autoriza√ß√£o retornado pelo GitHub"
                },
                {
                  "key": "state",
                  "value": "{{oauth_state}}",
                  "description": "Estado para valida√ß√£o de seguran√ßa"
                }
              ]
            },
            "description": "Endpoint de callback do GitHub OAuth\n\n‚úÖ **Autom√°tico:** Este endpoint √© chamado automaticamente pelo GitHub ap√≥s autoriza√ß√£o."
          }
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User data is returned', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "Retorna informa√ß√µes do usu√°rio logado"
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Clear token after logout",
                  "pm.environment.unset('auth_token');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Realiza logout do usu√°rio (invalida token)"
          }
        },
        {
          "name": "Auth Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Auth test successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('autenticado');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/test",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "test"]
            },
            "description": "Testa se a autentica√ß√£o est√° funcionando"
          }
        }
      ],
      "description": "Sistema completo de autentica√ß√£o OAuth com GitHub"
    },
    {
      "name": "üìä Dashboard",
      "item": [
        {
          "name": "Dashboard Stats",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Stats data is complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total_forms');",
                  "    pm.expect(jsonData).to.have.property('total_responses');",
                  "    pm.expect(jsonData).to.have.property('active_forms');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/dashboard/stats",
              "host": ["{{baseUrl}}"],
              "path": ["dashboard", "stats"]
            },
            "description": "Retorna estat√≠sticas resumidas do dashboard:\n- Total de formul√°rios\n- Total de respostas\n- Formul√°rios ativos\n- M√©tricas de performance"
          }
        },
        {
          "name": "User Forms List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Forms list is array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Save first form ID for later use",
                  "if (pm.response.json().length > 0) {",
                  "    pm.environment.set('form_id', pm.response.json()[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/dashboard/forms",
              "host": ["{{baseUrl}}"],
              "path": ["dashboard", "forms"]
            },
            "description": "Lista todos os formul√°rios do usu√°rio com informa√ß√µes resumidas"
          }
        },
        {
          "name": "Dashboard Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('responses_by_form');",
                  "    pm.expect(jsonData).to.have.property('forms_by_status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/dashboard/analytics",
              "host": ["{{baseUrl}}"],
              "path": ["dashboard", "analytics"]
            },
            "description": "Dados para gr√°ficos e visualiza√ß√µes do dashboard"
          }
        },
        {
          "name": "Recent Activity",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Activity data structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('activities');",
                  "    pm.expect(jsonData.activities).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/dashboard/recent-activity",
              "host": ["{{baseUrl}}"],
              "path": ["dashboard", "recent-activity"]
            },
            "description": "Lista as atividades recentes do usu√°rio"
          }
        }
      ],
      "description": "Endpoints do dashboard com estat√≠sticas e m√©tricas"
    },
    {
      "name": "üìù Forms Management",
      "item": [
        {
          "name": "Create Form (Draft)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Form created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('form');",
                  "    pm.expect(jsonData.form).to.have.property('id');",
                  "});",
                  "",
                  "// Save form ID for later requests",
                  "if (pm.response.json().success) {",
                  "    pm.environment.set('form_id', pm.response.json().form.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Pesquisa de Satisfa√ß√£o {{$randomInt}}\",\n  \"description\": \"Formul√°rio para avaliar a satisfa√ß√£o dos clientes com nossos servi√ßos\",\n  \"icon\": \"survey\",\n  \"folder_color\": \"blue\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/forms",
              "host": ["{{baseUrl}}"],
              "path": ["forms"]
            },
            "description": "Cria um novo formul√°rio em modo rascunho"
          }
        },
        {
          "name": "Add Section with Questions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Section created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('section');",
                  "});",
                  "",
                  "// Save section and question IDs",
                  "if (pm.response.json().success) {",
                  "    pm.environment.set('section_id', pm.response.json().section.id);",
                  "    if (pm.response.json().questions && pm.response.json().questions.length > 0) {",
                  "        pm.environment.set('question_id', pm.response.json().questions[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Dados Pessoais\",\n  \"description\": \"Informa√ß√µes b√°sicas do respondente\",\n  \"order\": 1,\n  \"questions\": [\n    {\n      \"type\": \"short-text\",\n      \"title\": \"Nome completo\",\n      \"description\": \"Digite seu nome completo\",\n      \"required\": true,\n      \"options\": null,\n      \"validation\": {\n        \"min_length\": 3,\n        \"max_length\": 100\n      },\n      \"order\": 1\n    },\n    {\n      \"type\": \"email\",\n      \"title\": \"E-mail\",\n      \"description\": \"Seu melhor e-mail para contato\",\n      \"required\": true,\n      \"options\": null,\n      \"validation\": null,\n      \"order\": 2\n    },\n    {\n      \"type\": \"multiple-choice\",\n      \"title\": \"Como voc√™ nos conheceu?\",\n      \"description\": \"Selecione uma op√ß√£o\",\n      \"required\": false,\n      \"options\": {\n        \"choices\": [\n          \"Redes sociais\",\n          \"Indica√ß√£o de amigos\",\n          \"Busca no Google\",\n          \"Publicidade\",\n          \"Outros\"\n        ]\n      },\n      \"validation\": null,\n      \"order\": 3\n    },\n    {\n      \"type\": \"rating\",\n      \"title\": \"Como voc√™ avalia nosso atendimento?\",\n      \"description\": \"De 1 a 5 estrelas\",\n      \"required\": true,\n      \"options\": {\n        \"scale\": 5,\n        \"labels\": {\n          \"1\": \"Muito ruim\",\n          \"5\": \"Excelente\"\n        }\n      },\n      \"validation\": null,\n      \"order\": 4\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/forms/{{formId}}/sections",
              "host": ["{{baseUrl}}"],
              "path": ["forms", "{{formId}}", "sections"]
            },
            "description": "Adiciona uma se√ß√£o com perguntas ao formul√°rio"
          }
        },
        {
          "name": "Update Section",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Section updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Dados Pessoais - Atualizado\",\n  \"description\": \"Informa√ß√µes b√°sicas do respondente (vers√£o atualizada)\",\n  \"order\": 1,\n  \"questions\": [\n    {\n      \"id\": \"{{questionId}}\",\n      \"type\": \"short-text\",\n      \"title\": \"Nome completo\",\n      \"description\": \"Digite seu nome completo\",\n      \"required\": true,\n      \"options\": null,\n      \"validation\": {\n        \"min_length\": 3,\n        \"max_length\": 100\n      },\n      \"order\": 1\n    },\n    {\n      \"type\": \"phone\",\n      \"title\": \"Telefone\",\n      \"description\": \"N√∫mero de telefone com DDD\",\n      \"required\": false,\n      \"options\": null,\n      \"validation\": {\n        \"pattern\": \"^\\\\([0-9]{2}\\\\) [0-9]{4,5}-[0-9]{4}$\"\n      },\n      \"order\": 2\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/sections/{{sectionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["sections", "{{sectionId}}"]
            },
            "description": "Atualiza uma se√ß√£o existente e suas perguntas"
          }
        },
        {
          "name": "Delete Section",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Section deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sections/{{sectionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["sections", "{{sectionId}}"]
            },
            "description": "Remove uma se√ß√£o e todas as suas perguntas"
          }
        },
        {
          "name": "Publish Form",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Form published successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('form');",
                  "    pm.expect(jsonData.form.status).to.equal('public');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Pesquisa de Satisfa√ß√£o - Final\",\n  \"description\": \"Formul√°rio completo e publicado para receber respostas\",\n  \"status\": \"public\",\n  \"sections_order\": [\"{{sectionId}}\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/forms/{{formId}}/publish",
              "host": ["{{baseUrl}}"],
              "path": ["forms", "{{formId}}", "publish"]
            },
            "description": "Publica o formul√°rio e define configura√ß√µes finais"
          }
        },
        {
          "name": "Get Public Form",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Public form data is complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('form');",
                  "    pm.expect(jsonData.form).to.have.property('sections');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/forms/{{formId}}/public",
              "host": ["{{baseUrl}}"],
              "path": ["forms", "{{formId}}", "public"]
            },
            "description": "Exibe formul√°rio p√∫blico pronto para preenchimento (endpoint p√∫blico)"
          }
        },
        {
          "name": "Submit Form Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response submitted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('session_id');",
                  "});",
                  "",
                  "// Save response session ID",
                  "if (pm.response.json().success) {",
                  "    pm.environment.set('response_session_id', pm.response.json().session_id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"respondent_email\": \"{{$randomEmail}}\",\n  \"answers\": [\n    {\n      \"question_id\": \"{{questionId}}\",\n      \"value\": [\"{{$randomFullName}}\"]\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/forms/{{formId}}/submit",
              "host": ["{{baseUrl}}"],
              "path": ["forms", "{{formId}}", "submit"]
            },
            "description": "Submete respostas para um formul√°rio p√∫blico (endpoint p√∫blico)"
          }
        }
      ],
      "description": "CRUD completo para gerenciamento de formul√°rios"
    },
    {
      "name": "üìà Analytics & Reports",
      "item": [
        {
          "name": "Form Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('analytics');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/forms/{{formId}}/analytics",
              "host": ["{{baseUrl}}"],
              "path": ["forms", "{{formId}}", "analytics"]
            },
            "description": "Estat√≠sticas agregadas das respostas do formul√°rio"
          }
        },
        {
          "name": "Form Responses List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Responses list is array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Save first response session ID if exists",
                  "if (pm.response.json().length > 0) {",
                  "    pm.environment.set('response_session_id', pm.response.json()[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/forms/{{formId}}/responses",
              "host": ["{{baseUrl}}"],
              "path": ["forms", "{{formId}}", "responses"]
            },
            "description": "Lista todas as sess√µes de respostas do formul√°rio"
          }
        },
        {
          "name": "Response Session Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response session data is complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('session');",
                  "    pm.expect(jsonData.session).to.have.property('responses');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/responses/{{responseSessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["responses", "{{responseSessionId}}"]
            },
            "description": "Detalha uma sess√£o de resposta individual com todas as respostas"
          }
        }
      ],
      "description": "Endpoints para analytics e relat√≥rios de formul√°rios"
    },
    {
      "name": "üß™ Test Scenarios",
      "item": [
        {
          "name": "Complete Flow Test",
          "item": [
            {
              "name": "1. Create Test Form",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Flow Form {{$timestamp}}\",\n  \"description\": \"Form created for complete flow testing\",\n  \"icon\": \"test\",\n  \"folder_color\": \"green\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/forms",
                  "host": ["{{baseUrl}}"],
                  "path": ["forms"]
                }
              }
            },
            {
              "name": "2. Add Section to Test Form",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Section\",\n  \"description\": \"Section for testing purposes\",\n  \"order\": 1,\n  \"questions\": [\n    {\n      \"type\": \"short-text\",\n      \"title\": \"Test Question\",\n      \"description\": \"Simple test question\",\n      \"required\": true,\n      \"options\": null,\n      \"validation\": null,\n      \"order\": 1\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/forms/{{formId}}/sections",
                  "host": ["{{baseUrl}}"],
                  "path": ["forms", "{{formId}}", "sections"]
                }
              }
            },
            {
              "name": "3. Publish Test Form",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Flow Form - Published\",\n  \"description\": \"Published test form\",\n  \"status\": \"public\",\n  \"sections_order\": [\"{{sectionId}}\"]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/forms/{{formId}}/publish",
                  "host": ["{{baseUrl}}"],
                  "path": ["forms", "{{formId}}", "publish"]
                }
              }
            },
            {
              "name": "4. Submit Test Response",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"respondent_email\": \"test-{{$timestamp}}@example.com\",\n  \"answers\": [\n    {\n      \"question_id\": \"{{questionId}}\",\n      \"value\": [\"Test Answer {{$timestamp}}\"]\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/forms/{{formId}}/submit",
                  "host": ["{{baseUrl}}"],
                  "path": ["forms", "{{formId}}", "submit"]
                }
              }
            },
            {
              "name": "5. Check Analytics",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/forms/{{formId}}/analytics",
                  "host": ["{{baseUrl}}"],
                  "path": ["forms", "{{formId}}", "analytics"]
                }
              }
            }
          ],
          "description": "Teste do fluxo completo: criar ‚Üí adicionar se√ß√£o ‚Üí publicar ‚Üí responder ‚Üí verificar analytics"
        }
      ],
      "description": "Cen√°rios de teste automatizados para validar funcionalidades"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "// Set default baseUrl if not configured",
          "if (!pm.environment.get('base_url')) {",
          "    pm.environment.set('base_url', 'http://localhost:8000');",
          "}",
          "",
          "// Check if token is available for protected endpoints",
          "const protectedPaths = ['/dashboard', '/forms', '/sections', '/auth/me', '/auth/logout', '/auth/test'];",
          "const currentPath = pm.request.url.getPath();",
          "const isProtected = protectedPaths.some(path => currentPath.includes(path));",
          "",
          "if (isProtected && !pm.environment.get('auth_token')) {",
          "    console.warn('‚ö†Ô∏è Este endpoint requer autentica√ß√£o. Execute primeiro os endpoints de auth.');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "// Log response time for performance monitoring",
          "console.log(`üìä Response time: ${pm.response.responseTime}ms`);",
          "",
          "// Check for common error patterns",
          "if (pm.response.code >= 400) {",
          "    console.error(`‚ùå Error ${pm.response.code}: ${pm.response.status}`);",
          "    try {",
          "        const error = pm.response.json();",
          "        console.error('Error details:', error);",
          "    } catch (e) {",
          "        console.error('Response body:', pm.response.text());",
          "    }",
          "}",
          "",
          "// Auto-extract token from auth responses",
          "if (pm.request.url.getPath().includes('/auth/') && pm.response.json().access_token) {",
          "    pm.environment.set('auth_token', pm.response.json().access_token);",
          "    console.log('‚úÖ Token saved automatically');",
          "}"
        ]
      }
    }
  ]
}
