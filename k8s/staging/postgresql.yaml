apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: formerr
data:
  init-user.sh: |
    #!/bin/bash
    set -e
    
    # Wait for PostgreSQL to be ready
    until pg_isready -U postgres -d formerr_db; do
      echo "Waiting for PostgreSQL to be ready..."
      sleep 2
    done
    
    # Create the application user
    psql -v ON_ERROR_STOP=1 --username postgres --dbname formerr_db <<-EOSQL
        CREATE USER formerr_user WITH ENCRYPTED PASSWORD '$FORMERR_USER_PASSWORD';
        GRANT ALL PRIVILEGES ON DATABASE formerr_db TO formerr_user;
        ALTER DATABASE formerr_db OWNER TO formerr_user;
    EOSQL
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: formerr
type: Opaque
data:
  # These will be generated by the CI/CD pipeline with random passwords
  POSTGRES_PASSWORD: ""  # Base64 encoded postgres user password
  FORMERR_USER_PASSWORD: ""  # Base64 encoded formerr_user password
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: formerr
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: do-block-storage
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: formerr
  labels:
    app: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        envFrom:
        - configMapRef:
            name: postgres-config
        env:
        - name: POSTGRES_DB
          value: formerr_db
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: FORMERR_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: FORMERR_USER_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - formerr_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - formerr_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: formerr
  labels:
    app: postgresql
spec:
  selector:
    app: postgresql
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP
