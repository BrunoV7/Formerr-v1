# Default values for formerr.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  imageRegistry: registry.digitalocean.com
  imagePullSecrets:
    - name: formerr-registry-secret

# Application settings
app:
  name: formerr
  version: "1.0.0"

# Backend configuration
backend:
  enabled: true
  image:
    repository: formerr-backend
    tag: latest
    pullPolicy: Always
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 8000
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    FRONTEND_SUCCESS_URL: "https://formerr.example.com/auth/success"
    FRONTEND_ERROR_URL: "https://formerr.example.com/auth/error"
    OAUTH_CALLBACK_URL: "https://api.formerr.example.com/auth/github/callback"
    ALLOWED_ORIGINS: "https://formerr.example.com"

# Frontend configuration
frontend:
  enabled: true
  image:
    repository: formerr-frontend
    tag: latest
    pullPolicy: Always
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 3000
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    NEXT_PUBLIC_API_URL: "https://api.formerr.example.com"

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  
  hosts:
    - host: formerr.example.com
      paths:
        - path: /(.*)
          pathType: Prefix
          service: frontend
    - host: api.formerr.example.com
      paths:
        - path: /(.*)
          pathType: Prefix
          service: backend
  
  tls:
    - secretName: formerr-tls
      hosts:
        - formerr.example.com
        - api.formerr.example.com

# PostgreSQL configuration (for staging - internal database)
postgresql:
  enabled: false  # Default disabled, enabled per environment
  auth:
    database: "formerr_db"
    username: "formerr_user"
    password: ""
    postgresPassword: ""
  primary:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

# External database configuration (for production - managed database)
externalDatabase:
  enabled: false  # Default disabled, enabled per environment
  type: postgresql
  host: ""
  port: 5432
  database: "formerr_db"
  username: "formerr_user"
  existingSecret: "formerr-database-secret"
  existingSecretPasswordKey: "postgres-password"
  existingSecretUrlKey: "database-url"

# Database connection settings (used by both internal and external)
database:
  host: ""
  port: 5432
  name: formerr_db
  user: formerr_user
  password: ""
  existingSecret: formerr-database-secret
  existingSecretKey: database-url

# Secrets
secrets:
  github:
    clientId: ""
    clientSecret: ""
  jwt:
    secret: ""
  session:
    secret: ""

# Monitoring
monitoring:
  enabled: true
  namespace: monitoring

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network policies
networkPolicy:
  enabled: false

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

# Node selector and tolerations
nodeSelector: {}
tolerations: []
affinity: {}
