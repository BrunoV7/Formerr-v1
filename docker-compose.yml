version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: formerr-postgres
    environment:
      POSTGRES_DB: formerr_db
      POSTGRES_USER: formerr_user
      POSTGRES_PASSWORD: formerr_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U formerr_user -d formerr_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./Formerr-FastAPI
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgresql://formerr_user:formerr_password@postgres:5432/formerr_db
        - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
        - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
        - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-for-development}
        - SESSION_SECRET=${SESSION_SECRET:-default-session-secret-for-development}
        - FRONTEND_SUCCESS_URL=http://localhost:3000/auth/success
        - FRONTEND_ERROR_URL=http://localhost:3000/auth/error
        - OAUTH_CALLBACK_URL=http://localhost:8000/auth/github/callback
        - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
    container_name: formerr-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://formerr_user:formerr_password@postgres:5432/formerr_db
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./formerr-frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
    container_name: formerr-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
