name: Backend Tests

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    paths:
      - 'backend/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 isort

    - name: Build Docker image
      run: |
        docker build -t formerr-backend:test .
        
    - name: Test Docker image
      run: |
        # Start container and test if it's healthy
        docker run -d --name test-backend -p 8000:8000 \
          -e DATABASE_URL=sqlite:///./test.db \
          -e SECRET_KEY=test-secret \
          -e GITHUB_CLIENT_ID=test \
          -e GITHUB_CLIENT_SECRET=test \
          formerr-backend:test
        
        # Wait for container to be ready
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Stop container
        docker stop test-backend
        docker rm test-backend

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  security-scan:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install safety
      run: pip install safety

    - name: Run security scan
      run: |
        # Check for known security vulnerabilities
        safety check -r requirements.txt --json || true
